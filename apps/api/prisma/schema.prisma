generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Cargo {
  ADMINISTRADOR
  TECNICO
  USUARIO
}

model Usuario {
  id              String  @id @default(uuid())
  googleId        String? @unique @map("google_id")
  nome            String
  email           String  @unique
  senha           String?
  avatarUrl       String? @map("avatar_url")
  cargo           Cargo   @default(USUARIO)
  ativo           Boolean @default(true)
  emailVerificado Boolean @default(false) @map("email_verificado")

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  comentarios         Comentario[]
  tecnicoChamado      TecnicoChamado[]
  chamadosSolicitados Chamado[]
  tokens               Token[]

  @@map("usuarios")
}

enum TipoToken {
  RECUPERAR_SENHA
  DEFINIR_SENHA
  VERIFICAR_EMAIL
}

model Token {
  id   String    @id @default(uuid())
  tipo TipoToken

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String

  criadoEm  DateTime @default(now()) @map("criado_em")
  validoAte DateTime @map("valido_ate")

  @@map("tokens")
}

model Categoria {
  id        String  @id @default(uuid())
  descricao String
  ativo     Boolean @default(true)

  chamados Chamado[]

  @@map("categorias")
}

model Local {
  id        String  @id @default(uuid())
  nome      String
  avatarUrl String? @map("avatar_url")
  ativo     Boolean @default(true)

  chamados Chamado[]

  @@map("locais")
}

enum Status {
  NOVO
  ABERTO
  EM_ANDAMENTO
  EM_ESPERA
  VALIDANDO
  FECHADO
  CANCELADO
}

enum Prioridade {
  BAIXA
  MEDIA
  ALTA
}

model Chamado {
  id         String     @id @default(uuid())
  titulo     String
  descricao  String
  execucao   String?
  status     Status     @default(NOVO)
  prioridade Prioridade @default(BAIXA)

  dataAbertura   DateTime  @default(now()) @map("data_abertura")
  dataFechamento DateTime? @map("data_fechamento")
  dataReabertura DateTime? @map("data_reabertura")
  atualizadoEm   DateTime  @updatedAt @map("atualizado_em")
  fechadoPor     String?   @map("fechado_por")

  usuario   Usuario @relation(fields: [abertoPor], references: [id])
  abertoPor String  @map("aberto_por")

  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String

  local   Local?  @relation(fields: [localId], references: [id])
  localId String?

  comentarios Comentario[]
  tecnico     TecnicoChamado?

  @@map("chamados")
}

model Comentario {
  id         String @id @default(uuid())
  comentario String

  chamado   Chamado @relation(fields: [chamadoId], references: [id])
  chamadoId String

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  @@map("comentarios")
}

model TecnicoChamado {
  id String @id @default(uuid())

  chamado   Chamado @relation(fields: [chamadoId], references: [id])
  chamadoId String  @unique

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  @@map("tecnico_chamado")
}
